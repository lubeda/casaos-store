volumes:
  # only bind mounts

environment:
  PGID: $PGID                           # Preset Group ID
  PUID: $PUID                           # Preset User ID
  TZ: $TZ                               # Current system timezone 

ports:
  - target: 8080
    published: ${WEBUI_PORT}
    protocol: tcp

services:
  postgres:
    image: postgres:12.20-bullseye
    volumes:
      - type: bind
        source: /DATA/AppData/$AppID/postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: kestra
      POSTGRES_USER: kestra
      POSTGRES_PASSWORD: k3str4
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 10

  kestra:
    image: kestra/kestra:v0.18.2
    # Note that this setup with a root user is intended for development purpose. 
    # Our base image runs without root, but the Docker Compose implementation needs root to access the Docker socket
    # To run Kestra in a rootless mode in production, see: https://kestra.io/docs/installation/podman-compose 
    user: "root"
    command: server standalone --worker-thread=128
    volumes:
      - type: bind
        source: /DATA/AppData/$AppID/kestra:/app/storage
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/kestra-wd:/tmp/kestra-wd
    environment:
      KESTRA_CONFIGURATION: |
        datasources:
          postgres:
            url: jdbc:postgresql://postgres:5432/kestra
            driverClassName: org.postgresql.Driver
            username: kestra
            password: k3str4
        kestra:
          server:
            basic-auth:
              enabled: false
              username: "admin@kestra.io" # it must be a valid email address
              password: kestra
          repository:
            type: postgres
          storage:
            type: local
            local:
              base-path: "/app/storage"
          queue:
            type: postgres
          tasks:
            tmp-dir:
              path: /tmp/kestra-wd/tmp
          url: http://localhost:${WEBUI_PORT}/
    ports:
      - "8080:8080"
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_started

x-casaos:
    architectures:                  # a list of architectures that the app supports
        - amd64
    main: kestra
    author: lubeda
    category: System
    description:                    # multiple locales are supported
        en_us: Kestra is a universal open-source orchestrator that simplifies both scheduled and event-driven workflows. It brings Infrastructure as Code practices to data, process, and microservice orchestration, allowing users to build reliable workflows and manage them with confidence. With just a few lines of code, you can create a flow directly from the UI.
    developer: kestra.io
    icon: https://cdn.jsdelivr.net/gh/lubeda/CasaOS-AppStore@main/Apps/kestra/icon.png
    tagline:                        # multiple locales are supported
        en_us: Free orchestrator
    screenshot: https://cdn.jsdelivr.net/gh/lubeda/CasaOS-AppStore@main/Apps/kestra/screenshot.jpg
    title:                          # multiple locales are supported
        en_us: Kestra
    tips:
        after_install:
            en_us: |
                This is crazy
        before_install:
            en_us: |
                (some notes for user to read prior to installation, such as preset `username` and `password` - markdown is supported!)
    index: /                        # the index page for web UI, e.g. index.html
    port_map: ${WEBUI_PORT}         # the port for web UI